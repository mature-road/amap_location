// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable, dead_code, unnecessary_cast
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:amap_location_fluttify/src/ios/ios.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

import 'package:foundation_fluttify/foundation_fluttify.dart';
import 'package:core_location_fluttify/core_location_fluttify.dart';
import 'package:amap_core_fluttify/amap_core_fluttify.dart';

class _AMapGeoFenceManagerDelegate_SUB extends NSObject with AMapGeoFenceManagerDelegate {}

mixin AMapGeoFenceManagerDelegate on NSObject {
  

  static AMapGeoFenceManagerDelegate subInstance() => _AMapGeoFenceManagerDelegate_SUB();

  static Future<AMapGeoFenceManagerDelegate> anonymous__() async {
    final __result__ = await kAmapLocationFluttifyChannel.invokeMethod('AMapGeoFenceManagerDelegate::createAnonymous__');
  
    final __object__ = AmapLocationFluttifyIOSAs<AMapGeoFenceManagerDelegate>(__result__)!;
  
    // handle callback
    MethodChannel('AMapGeoFenceManagerDelegate::Callback@${__object__.refId}', kAmapLocationFluttifyMethodCodec)
        .setMethodCallHandler((methodCall) async {
          try {
            final args = methodCall.arguments as Map;
            switch (methodCall.method) {
              case 'amapGeoFenceManager_doRequireLocationAuth':
                // print log
                if (fluttifyLogEnabled) {
                  debugPrint('fluttify-dart-callback: __object__.amapGeoFenceManager_doRequireLocationAuth?.call([\'manager\':${args['manager']}, \'locationManager\':${args['locationManager']}])');
                }
            
                // handle the native call
                __object__.amapGeoFenceManager_doRequireLocationAuth?.call(AmapLocationFluttifyIOSAs<AMapGeoFenceManager>(args['manager']), AmapLocationFluttifyIOSAs<CLLocationManager>(args['locationManager']));
                break;
              case 'amapGeoFenceManager_didAddRegionForMonitoringFinished_customID_error':
                // print log
                if (fluttifyLogEnabled) {
                  debugPrint('fluttify-dart-callback: __object__.amapGeoFenceManager_didAddRegionForMonitoringFinished_customID_error?.call([\'manager\':${args['manager']}, \'regions\':${args['regions']}, \'customID\':${args['customID']}, \'error\':${args['error']}])');
                }
            
                // handle the native call
                __object__.amapGeoFenceManager_didAddRegionForMonitoringFinished_customID_error?.call(AmapLocationFluttifyIOSAs<AMapGeoFenceManager>(args['manager']), (args['regions'] as List? ?? []).map((it) => AmapLocationFluttifyIOSAs<AMapGeoFenceRegion>(it)).where((e) => e != null).cast<AMapGeoFenceRegion>().toList(), args['customID'], AmapLocationFluttifyIOSAs<NSError>(args['error']));
                break;
              case 'amapGeoFenceManager_didGeoFencesStatusChangedForRegion_customID_error':
                // print log
                if (fluttifyLogEnabled) {
                  debugPrint('fluttify-dart-callback: __object__.amapGeoFenceManager_didGeoFencesStatusChangedForRegion_customID_error?.call([\'manager\':${args['manager']}, \'region\':${args['region']}, \'customID\':${args['customID']}, \'error\':${args['error']}])');
                }
            
                // handle the native call
                __object__.amapGeoFenceManager_didGeoFencesStatusChangedForRegion_customID_error?.call(AmapLocationFluttifyIOSAs<AMapGeoFenceManager>(args['manager']), AmapLocationFluttifyIOSAs<AMapGeoFenceRegion>(args['region']), args['customID'], AmapLocationFluttifyIOSAs<NSError>(args['error']));
                break;
              default:
                throw MissingPluginException('方法${methodCall.method}未实现');
                break;
            }
          } catch (e) {
            debugPrint(e.toString());
            rethrow;
          }
        });
  
    return __object__;
  }
  

  @override
  final String tag__ = 'amap_location_fluttify';

  

  

  Future<void> Function(AMapGeoFenceManager? manager, CLLocationManager? locationManager, void Function(NSError? error) completion)? amapLocationManager_doRequireTemporaryFullAccuracyAuth_completion;
  
  Future<void> Function(AMapGeoFenceManager? manager, CLLocationManager? locationManager)? amapGeoFenceManager_doRequireLocationAuth;
  
  Future<void> Function(AMapGeoFenceManager? manager, List<AMapGeoFenceRegion>? regions, String? customID, NSError? error)? amapGeoFenceManager_didAddRegionForMonitoringFinished_customID_error;
  
  Future<void> Function(AMapGeoFenceManager? manager, AMapGeoFenceRegion? region, String? customID, NSError? error)? amapGeoFenceManager_didGeoFencesStatusChangedForRegion_customID_error;
  
}

